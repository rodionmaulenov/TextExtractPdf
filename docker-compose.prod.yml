version: '3.9'

services:
  postgresql_db:
    container_name: postgresql_db
    image: postgres:latest
    env_file:
      - .env

  extract_text:
    container_name: extract_text
#    build:
#      context: ./work_dir
#      dockerfile: Dockerfileprod
    image: "${APP_IMAGE}"
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - SQL_NAME=${SQL_NAME}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_HOST=${SQL_HOST}
      - SQL_PORT=${SQL_PORT}
    expose:
      - '8000'
    volumes:
      - ./persistentdata/static:/home/app/web/static
      - ./persistentdata/media:/home/app/web/media
      - ./.env:/home/app/web/.env
    env_file:
      - .env
    depends_on:
      - postgresql_db
    command: >
      bash -c '
              ./manage.py collectstatic --noinput &&
              ./manage.py migrate &&
              gunicorn -b 0.0.0.0:8000 home_api.wsgi:application
            '

  nginx_proxy:
    container_name: nginx_proxy
#    build:
#      context: ./nginx
#      dockerfile: Dockerfile
    image: "${NGINX_IMAGE}"
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./persistentdata/certbot/conf:/etc/letsencrypt
      - ./persistentdata/certbot/www:/var/www/certbot
      - ./persistentdata/static:/home/app/web/static
      - ./persistentdata/media:/home/app/web/media
    depends_on:
      - extract_text

  certbot:
    container_name: certbot
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./persistentdata/certbot/conf:/etc/letsencrypt
      - ./persistentdata/certbot/www:/var/www/certbot
