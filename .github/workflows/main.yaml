name: CI/CD TEXT/EXTRACT/PDF

on:
  push:
    branches:
      - main

env:
  APP_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/text_extract
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
  ACME_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/acme

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./work_dir

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
      SQL_NAME: ${{ secrets.TEST_DB_NAME }}
      SQL_USER: ${{ secrets.TEST_DB_USER }}
      SQL_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      SQL_HOST: ${{ secrets.TEST_DB_HOST }}
      SQL_PORT: ${{ secrets.TEST_DB_PORT }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.SQL_USER }}
          POSTGRES_PASSWORD: ${{ env.SQL_PASSWORD }}
          POSTGRES_DB: ${{ env.SQL_NAME }}
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  

      - name: Run Tests
        run: |
          python manage.py test


  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout master
        uses: actions/checkout@v1

      - name: Create .env file
        uses: ozaytsev86/create-env-file@v1
        with:
            INPUT_ENV_DEBUG: ${{ secrets.DEBUG }}
            INPUT_ENV_SECRET_KEY: ${{ secrets.SECRET_KEY }}
            INPUT_ENV_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
            INPUT_ENV_CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
            INPUT_ENV_VIRTUAL_HOST: ${{ secrets.VIRTUAL_HOST }}
            INPUT_ENV_LETSENCRYPT_HOST: ${{ secrets.LETSENCRYPT_HOST }}
            INPUT_ENV_SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
            INPUT_ENV_SQL_USER: ${{ secrets.SQL_USER }}
            INPUT_ENV_SQL_HOST: ${{ secrets.SQL_HOST }}
            INPUT_ENV_SQL_PORT: ${{ secrets.SQL_PORT }}
            INPUT_ENV_SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
            INPUT_ENV_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            INPUT_ENV_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            INPUT_ENV_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            INPUT_ENV_DEFAULT_EMAIL: ${{ secrets.DEFAULT_EMAIL }}
            INPUT_ENV_NGINX_PROXY_CONTAINER: ${{ secrets.NGINX_PROXY_CONTAINER }}

      - name: Set environment variables
        run: |
          echo "APP_IMAGE=$(echo ${{ env.APP_IMAGE }} )" >> $GITHUB_ENV
          echo "ACME_IMAGE=$(echo ${{ env.NGINX_IMAGE }} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{ env.ACME_IMAGE }} )" >> $GITHUB_ENV

      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Pull images
        run: |
          docker pull ${{ env.APP_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
          docker pull ${{ env.ACME_IMAGE }} || true

      - name: Build images
        run: |
          docker-compose -f docker-compose.cicd.yml build

      - name: Push images
        run: |
          docker push ${{ env.APP_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}
          docker push ${{ env.ACME_IMAGE }}
          
