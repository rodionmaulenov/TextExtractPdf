name: CI/CD TEXT/EXTRACT/PDF

on:
  push:
    branches:
      - main

env:
  APP_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/text_extract
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
  ACME_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/acme

jobs:
  verify_variables:
    name: Verify Environment Variables
    runs-on: ubuntu-latest
    steps:
    - name: Set up environment variables
      run: |
        APP_IMAGE=ghcr.io/${{ github.repository | replace('/', '-') }}/text_extract
        NGINX_IMAGE=ghcr.io/${{ github.repository | replace('/', '-') }}/nginx
        ACME_IMAGE=ghcr.io/${{ github.repository | replace('/', '-') }}/acme
        echo "APP_IMAGE=${APP_IMAGE}" >> $GITHUB_ENV
        echo "NGINX_IMAGE=${NGINX_IMAGE}" >> $GITHUB_ENV
        echo "ACME_IMAGE=${ACME_IMAGE}" >> $GITHUB_ENV

    - name: Print APP_IMAGE
      run: echo "APP_IMAGE=${{ env.APP_IMAGE }}"

    - name: Print NGINX_IMAGE
      run: echo "NGINX_IMAGE=${{ env.NGINX_IMAGE }}"

    - name: Print ACME_IMAGE
      run: echo "ACME_IMAGE=${{ env.ACME_IMAGE }}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./work_dir

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
      SQL_NAME: ${{ secrets.TEST_DB_NAME }}
      SQL_USER: ${{ secrets.TEST_DB_USER }}
      SQL_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      SQL_HOST: ${{ secrets.TEST_DB_HOST }}
      SQL_PORT: ${{ secrets.TEST_DB_PORT }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.SQL_USER }}
          POSTGRES_PASSWORD: ${{ env.SQL_PASSWORD }}
          POSTGRES_DB: ${{ env.SQL_NAME }}
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  

      - name: Run Tests
        run: |
          python manage.py test


  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout master
        uses: actions/checkout@v1

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
            file_name: .env
            envkey_DEBUG: ${{ secrets.DEBUG }}
            envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
            envkey_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
            envkey_CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
            envkey_VIRTUAL_HOST: ${{ secrets.VIRTUAL_HOST }}
            envkey_LETSENCRYPT_HOST: ${{ secrets.LETSENCRYPT_HOST }}
            envkey_SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
            envkey_SQL_USER: ${{ secrets.SQL_USER }}
            envkey_SQL_HOST: ${{ secrets.SQL_HOST }}
            envkey_SQL_PORT: ${{ secrets.SQL_PORT }}
            envkey_SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
            envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
            envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
            envkey_DEFAULT_EMAIL: ${{ secrets.DEFAULT_EMAIL }}
            envkey_NGINX_PROXY_CONTAINER: ${{ secrets.NGINX_PROXY_CONTAINER }}

      - name: Set environment variables
        run: |
          echo "APP_IMAGE=$(echo ${{ env.APP_IMAGE }} )" >> $GITHUB_ENV
          echo "ACME_IMAGE=$(echo ${{ env.NGINX_IMAGE }} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{ env.ACME_IMAGE }} )" >> $GITHUB_ENV

      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Pull images
        run: |
          docker pull ${{ env.APP_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
          docker pull ${{ env.ACME_IMAGE }} || true

      - name: Build images
        run: |
          docker-compose -f docker-compose.cicd.yml build

      - name: Push images
        run: |
          docker push ${{ env.APP_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}
          docker push ${{ env.ACME_IMAGE }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout master
        uses: actions/checkout@v1

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          file_name: .env
          envkey_DEBUG: ${{ secrets.DEBUG }}
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          envkey_CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
          envkey_VIRTUAL_HOST: ${{ secrets.VIRTUAL_HOST }}
          envkey_LETSENCRYPT_HOST: ${{ secrets.LETSENCRYPT_HOST }}
          envkey_SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
          envkey_SQL_USER: ${{ secrets.SQL_USER }}
          envkey_SQL_HOST: ${{ secrets.SQL_HOST }}
          envkey_SQL_PORT: ${{ secrets.SQL_PORT }}
          envkey_SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_DEFAULT_EMAIL: ${{ secrets.DEFAULT_EMAIL }}
          envkey_NGINX_PROXY_CONTAINER: ${{ secrets.NGINX_PROXY_CONTAINER }}
          envkey_APP_IMAGE: ${{ env.APP_IMAGE }}
          envkey_NGINX_IMAGE: ${{ env.NGINX_IMAGE }}
          envkey_ACME_IMAGE: ${{ env.ACME_IMAGE }}
          envkey_NAMESPACE: ${{ secrets.NAMESPACE }}
          envkey_PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}


      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Print APP_IMAGE
        run: echo "APP_IMAGE=${APP_IMAGE}"

      - name: Print NGINX_IMAGE
        run: echo "NGINX_IMAGE=${NGINX_IMAGE}"

      - name: Print ACME_IMAGE
        run: echo "ACME_IMAGE=${ACME_IMAGE}"



      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -T -o StrictHostKeyChecking=no -r ./.env \
                ./work_dir \
                ./acme_companion \
                ./nginx \
              ./docker-compose.prod.yml \
              root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/home/rodion/TEXT_EXTRACT_PDF
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
              cd /home/rodion/TEXT_EXTRACT_PDF
              source .env
              docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
              docker pull $APP_IMAGE
              docker pull $NGINX_IMAGE
              docker pull $env.ACME_IMAGE
              docker-compose -f docker-compose.prod.yml up -d
          ENDSSH
          
