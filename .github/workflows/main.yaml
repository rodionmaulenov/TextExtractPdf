name: CI/CD TEXT/EXTRACT/PDF

on:
  push:
    branches:
      - main


#env:
#  APP_IMAGE: ghcr.io/${{ secrets.REPOSITORY_GITHUB }}/text_extract
#  NGINX_IMAGE: ghcr.io/${{ secrets.REPOSITORY_GITHUB }}/nginx
#  DEBUG: ${{ secrets.DEBUG }}
#  SECRET_KEY: ${{ secrets.SECRET_KEY }}
#  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
#  CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
#  SQL_NAME: ${{ secrets.SQL_NAME }}
#  SQL_USER: ${{ secrets.SQL_USER }}
#  SQL_HOST: ${{ secrets.SQL_HOST }}
#  SQL_PORT: ${{ secrets.SQL_PORT }}
#  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
#  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}

jobs:

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
#    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v4.0.0

      - name: 'Create env file'
        run: |
          touch .env
          echo DEBUG=${{ secrets.DEBUG }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo SQL_NAME=${{ secrets.SQL_NAME }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env

      - name: Configure ssh connection
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
            mkdir -p ~/.ssh
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Copy files to DigitalOcean
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no \
            -r ./work_dir ./nginx ./docker-compose.prod.yml ./cleanup_docker_images.sh ./.env \
            root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/home/rodion/TEXT_EXTRACT_PDF

          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} <<EOF
            chown -R rodion:rodion /home/rodion/TEXT_EXTRACT_PDF
            cd /home/rodion/TEXT_EXTRACT_PDF
            source .env
            docker-compose -f docker-compose.prod.yml up -d --build
          EOF


#  deploy:
#      name: Deploy to DigitalOcean
#      runs-on: ubuntu-latest
#      needs: copy
#
#      steps:
#        - name: bring up docker containers on production server
#          uses: appleboy/ssh-action@v1.0.0
#          with:
#            host: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}
#            username: root
#            key: ${{ secrets.PRIVATE_KEY }}
#            script: |
#              cd /home/rodion/TEXT_EXTRACT_PDF
#              echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
#              docker pull ${{ env.APP_IMAGE }}
#              docker pull ${{ env.NGINX_IMAGE }}
#              source .env
#              docker-compose -f docker-compose.prod.yml up
#              chmod +x cleanup_docker_images.sh
#              ./cleanup_docker_images.sh
