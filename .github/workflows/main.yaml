name: CI/CD TEXT/EXTRACT/PDF

on:
  push:
    branches:
      - main

env:
  APP_IMAGE: ghcr.io/${{ secrets.REPOSITORY_GITHUB }}/text_extract
  NGINX_IMAGE: ghcr.io/${{ secrets.REPOSITORY_GITHUB }}/nginx

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./work_dir

    env:
      DJANGO_SETTINGS_MODULE: home_api.settings.test
      SQL_NAME: databasename
      SQL_USER: databaseuser
      SQL_PASSWORD: databasepassword
      SQL_HOST: localhost
      SQL_PORT: 5432
      ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: databaseuser
          POSTGRES_PASSWORD: databasepassword
          POSTGRES_DB: databasename
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.0.0

      - name: Set up Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          python manage.py test
          

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout master
        uses: actions/checkout@v4.0.0

      - name: Create env file
        run: |
          touch .env
          echo DJANGO_SETTINGS_MODULE=${{ secrets.ENV_SETTINGS }} >> .env
          echo DEBUG=${{ secrets.DEBUG }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo ALLOWED_HOSTS1=${{ secrets.ALLOWED_HOSTS1 }} >> .env
          echo WWW_HOST=${{ secrets.WWW_HOST }} >> .env
          echo OTHERS_HOSTS=${{ secrets.OTHERS_HOSTS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
          echo SQL_NAME=${{ secrets.SQL_NAME }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
          echo APP_IMAGE=${{ env.APP_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo DO_SPACES_ACCESS_KEY_ID=${{ secrets.DO_SPACES_ACCESS_KEY_ID}} >> .env
          echo DO_SPACES_AWS_SECRET_ACCESS_KEY=${{ secrets.DO_SPACES_AWS_SECRET_ACCESS_KEY }} >> .env

      - name: Build images
        run: |
          docker-compose -f docker-compose.cicd.yml build

      - name: Log in to GitHub Packages
        run: echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Push images
        run: |
          docker push ${{ env.APP_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v4.0.0

      - name: Create env file
        run: |
          touch .env
          echo DJANGO_SETTINGS_MODULE=${{ secrets.ENV_SETTINGS }} >> .env
          echo DEBUG=${{ secrets.DEBUG }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo ALLOWED_HOSTS1=${{ secrets.ALLOWED_HOSTS1 }} >> .env
          echo WWW_HOST=${{ secrets.WWW_HOST }} >> .env
          echo OTHERS_HOSTS=${{ secrets.OTHERS_HOSTS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
          echo SQL_NAME=${{ secrets.SQL_NAME }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
          echo APP_IMAGE=${{ env.APP_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}} >> .env
          echo SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo DO_SPACES_ACCESS_KEY_ID=${{ secrets.DO_SPACES_ACCESS_KEY_ID}} >> .env
          echo DO_SPACES_AWS_SECRET_ACCESS_KEY=${{ secrets.DO_SPACES_AWS_SECRET_ACCESS_KEY }} >> .env
          

      - name: Configure ssh connection
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy to DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no \
            -r ./work_dir ./nginx ./docker-compose.prod.yml ./cleanup_docker_images.sh ./.env \
            root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/home/rodion/TEXT_EXTRACT_PDF

          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} <<EOF
            chown -R rodion:rodion /home/rodion/TEXT_EXTRACT_PDF
            cd /home/rodion/TEXT_EXTRACT_PDF
            echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
            docker pull ${{ env.APP_IMAGE }}
            docker pull ${{ env.NGINX_IMAGE }}
            source .env
            docker-compose -f docker-compose.prod.yml up -d
            chmod +x cleanup_docker_images.sh
            ./cleanup_docker_images.sh
          EOF



